Module 2 question-answer



21. What is inheritance?
=>  One class give their all properties and behaviour to another class

22. Which inheritance is not supported by Dart? Why? 
=> Multiple inheritance is not supported in dart 
   because at the same time two class not give their properties and behaviour to their parent class Multiple inheritance can lead to the diamond problem.
B3. What is advantage of inheritance?
=> It promotes reusability of the code and reduces redundant code. It helps to design a program in a better way.


23. Difference between inheritance and encapsulation. 
=>  Inheritance allows a class to inherit properties and behaviors from another class, while encapsulation hides the internal state and implementation details of an object.
B5. Difference between inheritance and abstraction.
=>Inheritance facilitates the creation of new classes based on existing ones, whereas abstraction emphasizes the creation of simplified models that capture essential features of a system.

24. Difference between inheritance and polymorphism.
=>Polymorphism is that in which we can perform a task in multiple forms or ways  Wheres Inheritance is derived from one class to another class.

25. Can we override static method in Dart?
=> can't override static method in dart.

26. Can we overload static method in Dart?
=> can't overload static method in dart.

27. Can a class implement more than one interface? 
=> Yes
B10. Can a class extend more than one class in Dart?
=> No 

28. Can an interface extend more than one interface in Dart?
=>No interface extend more than one interface in Dart.

29. What will happen if a class implements two interfaces and they both have a method with same name and signature?
=> The implementing class can implement both interface methods with a single concrete method.

30. Can we pass an object of a subclass to a method expecting an object of the super class? 
=>yes 
B14. Are static members inherited to sub classes?
=> No 

31. What happens if the parent and the child class have a field with same identifier? 
=>If both the parent class and the child class have a field with the same identifier, the field in the child class will hide the field in the parent class. 

B16. Are constructors and initializers also inherited to sub classes?
=>No constructors and initializers also inherited to sub classes.

32. How do you restrict a member of a class from inheriting by its sub classes?
=>you can restrict a member of a class from being inherited by its subclasses by using the final keyword. 

33. How do you implement multiple inheritance in Dart?
=>No

34. Can a class extend by itself in Dart?
=>No

35. How do you override a private method in Dart?
=>cannot override private methods in dart

36. When to overload a method in Dart and when to override it?
=> Overload a method in Dart when you want to provide multiple implementations with different parameters;
   override it when you want to replace the implementation of a method inherited from a superclass in a subclass.

37. What the order is of extends and implements keyword on Dart class declaration? 
=>


38. How do you prevent overriding a Dart method without using the final modifier?
=>using the super keyword in the subclass.

39. What are the rules of method overriding in Dart?
=>The return type should be the same as in the method present in the parentclass.
	

40. Difference between method overriding and overloading in Dart.
=>overriding:-overriding method support in Dart 
  overloading:-overloading is not supported in Dart


41. What happens when a class implements two interfaces and both declare field (variable) with same name?
=> If the class implement two interfaces and declare field same then one method show in class because dart is dynamic language supported.

42. Can a subclass instance method override a superclass static method?
=>An instance method cannot override a static method

43. Can a subclass static method hide superclass instance method?
=>A subclass static method cannot hide superclass instance method. 

44. Can a superclass access subclass member?
=>No

45. Difference between object oriented and object based language. 
=>  Object-Oriented languages:
	- Object-oriented languages fully support all major principles of OOP, including encapsulation, inheritance, polymorphism, and abstraction.
	- they typically allow for the creation of classes, which serve as blueprints for creating objects. Classes can have properties and methods associated with them.
   Object-Based languages:
	- Object-based languages provide some but not all features of OOP.
	- Typically, object-based languages allow for the creation of objects but may not have the concept of classes or inheritance.











